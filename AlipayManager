public class AlipayManager {

    private static final int MSG_SDK_PAY_FLAG = 1;


    private Activity mActivity;
    // 商户PID
    public static final String PARTNER = "";
    // 商户收款账号
    public static final String SELLER = "";
    // 商户私钥，pkcs8格式
    public static final String RSA_PRIVATE = "";

    public AlipayManager(Activity mActivity) {
        this.mActivity = mActivity;
    }

   //服务器创建支付的订单
    public void createAlipay(String tradeId, String order_type) {
        // TODO: 2016/12/28 显示dialog
        String token = HomeApplications.getApplication().getToken();
        String uid = HomeApplications.getApplication().getPatient().getData().getUser_id();
        String trade_id = tradeId;
        final AlphaLoadingDialog alphaLoadingDialog = new AlphaLoadingDialog(mActivity);
        alphaLoadingDialog.showLoadingDialog(HomeApplications.dialogWidth, HomeApplications.dialogHeight);
        AjaxDao.creatAlipay(token, uid, trade_id, order_type, new ICallBack() {
            @Override
            public void result(Json json) {
                // TODO: 2016/12/28 取消dialog
                if (json.getString("code").equals("200")) {
                    Toast.makeText(mActivity, "请求支付宝订单成功", Toast.LENGTH_SHORT).show();
                    alphaLoadingDialog.cancelLoadingDialog();
                    Gson gson = new Gson();
                    //缴费成功，获得的几个必要参数
                    final PaymentModeEntity paymentModeEntity = gson.fromJson(json.toString(), PaymentModeEntity.class);
                    final String name = paymentModeEntity.getData().getOrderNo();//订单号
                    final String url = paymentModeEntity.getData().getNotify_url(); //页面通知地址
                    final String price = paymentModeEntity.getData().getTotal_fee();
                    final String title = paymentModeEntity.getData().getTitle();
                    final String body = paymentModeEntity.getData().getBody();

                    goAlpay(title, body, price, url, name);
                } else {
                    // TODO: 2016/12/28 支付失败
                    alphaLoadingDialog.cancelLoadingDialog();
                    Toast.makeText(mActivity, "请求支付宝订单失败", Toast.LENGTH_SHORT).show();


                }
            }
        }, new ICallBack() {
            @Override
            public void result(Json json) {
                // TODO: 2016/12/28 取消dialog
                // TODO: 2016/12/28 支付失败
                alphaLoadingDialog.cancelLoadingDialog();
                Toast.makeText(mActivity, "请求支付宝订单成功", Toast.LENGTH_SHORT).show();

            }
        });
    }


    /**
     * 跳转到支付页面
     *
     * @param name        商品名称
     * @param description 商品描述
     * @param price       价格
     */
    public void goAlpay(String name, String description, String price, String url, String number) {

        String orderInfo = getOrderInfo(name, description, price, url, number);
        /**
         * 特别注意，这里的签名逻辑需要放在服务端，切勿将私钥泄露在代码中！
         */
        String sign = sign(orderInfo);
        try {
            /**
             * 仅需对sign 做URL编码
             */
            sign = URLEncoder.encode(sign, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        /**
         * 完整的符合支付宝参数规范的订单信息
         */
        final String payInfo = orderInfo + "&sign=\"" + sign + "\"&" + getSignType();

        Runnable payRunnable = new Runnable() {

            @Override
            public void run() {
                // 构造PayTask 对象
                PayTask alipay = new PayTask(mActivity);
                // 调用支付接口，获取支付结果
                String result = alipay.pay(payInfo, true);

                Message msg = new Message();
                msg.what = MSG_SDK_PAY_FLAG;
                msg.obj = result;
                mHandler.sendMessage(msg);
            }
        };

        // 必须异步调用
        Thread payThread = new Thread(payRunnable);
        payThread.start();
    }


    /**
     * sign the order info. 对订单信息进行签名
     *
     * @param content 待签名订单信息
     */
    private String sign(String content) {
        return SignUtils.sign(content, RSA_PRIVATE);
    }

    /**
     * get the sign type we use. 获取签名方式
     */
    private String getSignType() {
        return "sign_type=\"RSA\"";
    }

    /**
     * create the order info. 创建订单信息
     */
    private String getOrderInfo(String subject, String body, String price, String url, String number) {

        // 签约合作者身份ID
        String orderInfo = "partner=" + "\"" + PARTNER + "\"";

        // 签约卖家支付宝账号
        orderInfo += "&seller_id=" + "\"" + SELLER + "\"";

        // 商户网站唯一订单号
        orderInfo += "&out_trade_no=" + "\"" + number + "\"";

        // 商品名称
        orderInfo += "&subject=" + "\"" + subject + "\"";

        // 商品详情
        orderInfo += "&body=" + "\"" + body + "\"";

        // 商品金额
        orderInfo += "&total_fee=" + "\"" + price + "\"";

        // 服务器异步通知页面路径
        orderInfo += "&notify_url=" + "\"" + url + "\"";


        // 服务接口名称， 固定值
        orderInfo += "&service=\"mobile.securitypay.pay\"";

        // 支付类型， 固定值
        orderInfo += "&payment_type=\"1\"";

        // 参数编码， 固定值
        orderInfo += "&_input_charset=\"utf-8\"";

        // 设置未付款交易的超时时间
        // 默认30分钟，一旦超时，该笔交易就会自动被关闭。
        // 取值范围：1m～15d。
        // m-分钟，h-小时，d-天，1c-当天（无论交易何时创建，都在0点关闭）。
        // 该参数数值不接受小数点，如1.5h，可转换为90m。
        orderInfo += "&it_b_pay=\"30m\"";

        // extern_token为经过快登授权获取到的alipay_open_id,带上此参数用户将使用授权的账户进行支付
        // orderInfo += "&extern_token=" + "\"" + extern_token + "\"";

        // 支付宝处理完请求后，当前页面跳转到商户指定页面的路径，可空
        orderInfo += "&return_url=\"m.alipay.com\"";

        // 调用银行卡支付，需配置此参数，参与签名， 固定值 （需要签约《无线银行卡快捷支付》才能使用）
        // orderInfo += "&paymethod=\"expressGateway\"";

        return orderInfo;
    }

    private Handler mHandler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MSG_SDK_PAY_FLAG: {
                    PayResult payResult = new PayResult((String) msg.obj);
                    /**
                     * 同步返回的结果必须放置到服务端进行验证（验证的规则请看https://doc.open.alipay.com/doc2/
                     * detail.htm?spm=0.0.0.0.xdvAU6&treeId=59&articleId=103665&
                     * docType=1) 建议商户依赖异步通知
                     */
                    String resultInfo = payResult.getResult();// 同步返回需要验证的信息

                    System.out.println("同步返回需要验证的信息" + resultInfo);
                    String resultStatus = payResult.getResultStatus();
                    // 判断resultStatus 为“9000”则代表支付成功，具体状态码代表含义可参考接口文档
                    if (TextUtils.equals(resultStatus, "9000")) {
                        if (alipayCallback != null) {
                            alipayCallback.onPaySuccess(payResult);
                        }
                    } else {
                        // 判断resultStatus 为非"9000"则代表可能支付失败
                        // "8000"代表支付结果因为支付渠道原因或者系统原因还在等待支付结果确认，最终交易是否成功以服务端异步通知为准（小概率状态）
                        if (TextUtils.equals(resultStatus, "8000")) {
                            Toast.makeText(mActivity, "支付结果确认中", Toast.LENGTH_SHORT).show();
                        } else {
                            // 其他值就可以判断为支付失败，包括用户主动取消支付，或者系统返回的错误
                            Toast.makeText(mActivity, "支付失败", Toast.LENGTH_SHORT).show();
                            if (alipayCallback != null)
                                alipayCallback.onPayFailed(payResult);
                        }
                    }
                    break;
                }
                default:
                    break;
            }
        }
    };

    private AlipayCallback alipayCallback;

    public void setAlipayCallback(AlipayCallback alipayCallback) {
        this.alipayCallback = alipayCallback;
    }

    public interface AlipayCallback {
        /**
         * 支付成功
         */
        public void onPaySuccess(PayResult payResult);

        /**
         * 支付失败
         */
        public void onPayFailed(PayResult payResult);
    }
}
